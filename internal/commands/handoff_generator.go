package commands

import (
	"fmt"
	"strings"
	"time"

	"github.com/snowarch/project-memory/internal/models"
	"github.com/snowarch/project-memory/internal/scanner"
	"github.com/snowarch/project-memory/internal/utils"
)

func generateHandoffDocContent(project *models.Project) (string, error) {
	var doc strings.Builder

	// Header
	doc.WriteString(fmt.Sprintf("# Developer Handoff: %s\n\n", project.Name))
	doc.WriteString(fmt.Sprintf("**Generated:** %s  \n", time.Now().Format("2006-01-02 15:04:05")))
	doc.WriteString(fmt.Sprintf("**Status:** %s  \n", project.Status))
	doc.WriteString(fmt.Sprintf("**Progress:** %d%%  \n", project.Progress))
	doc.WriteString(fmt.Sprintf("**Location:** `%s`  \n\n", project.Path))

	// Project Overview
	doc.WriteString("## üìã Project Overview\n\n")
	if project.Description != "" {
		doc.WriteString(fmt.Sprintf("%s\n\n", project.Description))
	} else {
		doc.WriteString("*No description available*\n\n")
	}

	// Current State Analysis
	doc.WriteString("## üîÑ Current State Analysis\n\n")
	analyzer := scanner.NewProjectStateAnalyzer(project.Path)
	activity, suggestedProgress, confidence, insights := analyzer.AnalyzeProjectActivity()

	doc.WriteString(fmt.Sprintf("**Activity Level:** %s  \n", activity))
	doc.WriteString(fmt.Sprintf("**Confidence:** %.1f%%  \n", confidence*100))
	doc.WriteString(fmt.Sprintf("**Suggested Progress:** %d%%  \n\n", suggestedProgress))

	if len(insights) > 0 {
		doc.WriteString("**Recent Insights:**\n")
		for _, insight := range insights {
			doc.WriteString(fmt.Sprintf("- %s\n", insight))
		}
		doc.WriteString("\n")
	}

	// Technologies
	doc.WriteString("## üõ†Ô∏è Technology Stack\n\n")
	
	// Generate context for technologies
	generator := utils.NewContextGenerator(project.Path)
	context, err := generator.GenerateAgentContext(
		project.Name,
		string(project.Status),
		project.Progress,
		project.Notes,
	)
	
	if err == nil && len(context.Technologies) > 0 {
		for _, tech := range context.Technologies {
			if tech.Version != "" {
				doc.WriteString(fmt.Sprintf("- **%s** %s (%s)\n", tech.Name, tech.Version, tech.Type))
			} else {
				doc.WriteString(fmt.Sprintf("- **%s** (%s)\n", tech.Name, tech.Type))
			}
		}
	} else {
		doc.WriteString("*No technologies detected*\n")
	}
	doc.WriteString("\n")

	// Git Information
	if project.IsGitRepo {
		doc.WriteString("## üì¶ Git Information\n\n")
		if project.GitRemote != "" {
			doc.WriteString(fmt.Sprintf("**Remote:** %s  \n", project.GitRemote))
		}
		if project.GitBranch != "" {
			doc.WriteString(fmt.Sprintf("**Branch:** %s  \n", project.GitBranch))
		}
		doc.WriteString("\n")
	}

	// Quick Start Instructions
	doc.WriteString("## üöÄ Quick Start\n\n")
	doc.WriteString("```bash\n")
	doc.WriteString(fmt.Sprintf("cd %s\n", project.Path))
	
	if context.QuickStart != nil {
		for _, cmd := range context.QuickStart.SetupCommands {
			doc.WriteString(cmd + "\n")
		}
		if context.QuickStart.DevCommand != "" {
			doc.WriteString(context.QuickStart.DevCommand + "\n")
		}
	} else {
		doc.WriteString("# Check project-specific setup instructions\n")
	}
	
	doc.WriteString("```\n\n")

	// Important Files
	if len(context.ImportantFiles) > 0 {
		doc.WriteString("## üìÑ Important Files\n\n")
		for _, file := range context.ImportantFiles {
			doc.WriteString(fmt.Sprintf("- `%s` - Configuration/Documentation\n", file))
		}
		doc.WriteString("\n")
	}

	// Notes and Context
	if project.Notes != "" {
		doc.WriteString("## üìù Notes & Context\n\n")
		doc.WriteString(fmt.Sprintf("%s\n\n", project.Notes))
	}

	// Next Steps
	doc.WriteString("## üéØ Recommended Next Steps\n\n")
	doc.WriteString("1. **Review Current State** - Check recent changes and uncommitted work\n")
	doc.WriteString("2. **Run Tests** - Ensure everything is working correctly\n")
	doc.WriteString("3. **Check Dependencies** - Update if necessary\n")
	doc.WriteString("4. **Review Issues** - Check for any blockers or known problems\n")
	doc.WriteString("5. **Setup Development Environment** - Follow quick start instructions\n\n")

	// Contact Information
	doc.WriteString("## üìû Handoff Information\n\n")
	doc.WriteString(fmt.Sprintf("**Handoff Date:** %s  \n", time.Now().Format("2006-01-02")))
	doc.WriteString(fmt.Sprintf("**Project Age:** %s  \n", time.Since(project.CreatedAt).Round(24*time.Hour)))
	doc.WriteString(fmt.Sprintf("**Last Updated:** %s  \n", project.UpdatedAt.Format("2006-01-02 15:04:05")))
	doc.WriteString("\n---\n")
	doc.WriteString("*Generated by Project Memory Bank (pmem)*\n")

	return doc.String(), nil
}
